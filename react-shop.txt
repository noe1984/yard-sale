-----INITIALIZING PROYECT
-Create folder react-shop and inside this by console git init and npm init 
    enter, until get to description: react eshop, in entry point: src/index.js, after until get to  keywords: react javascript
    in author: Noe Gonzalez <email>, license: MIT, yes and finish configuration
-Install dependencies, npm install react react-dom
-The first folder to be created is src and inside this the file: index.js
-In the same root create the "public" folder, inside this create "index.html"
-Inside src: "App.js" 
-Render 'App.js' using ReacDOM.render in index.html

-----INSTALLING WEBPACK AND BABEL 
- BABEL npm install @babel/core @babel/preset-env @babel/preset-react 
- WEBPACK npm install webpack webpack-cli webpack-dev-server 
- HTML PLUGIN  npm install babel-loader html-loader html-webpack-plugin

In root: .babelrc
{
    "presets": [
        "@babel/preset-env",
        "@babel/preset-react"
    ]
}

In root webpack.config.js

In packaje.json in scripts
    "start": "webpack serve --open",
    "build": "webpack --mode production"

Create the html basic structure in index.html wich contain a div with the 'App' id.

-----SASS
npm i mini-css-extract-plugin css-loader style-loader sass sass-loader -D
In webpack 
    const MiniCssExtractPlugin = require('mini-css-extract-plugin')
In rules
    {
        test:/\.s[ac]ss$/i,
        use:[
            "style-loader",
            "css-loader",
            "sass-loader"
        ]
    }
In plugins
    new MiniCssExtractPlugin({
        filename: '[name].css'
    }),
At the end add 
    devServer: {
        static: {
            directory: path.join(__dirname, 'public'),
            },
        compress: true,
        port: 3005,
    }
Inside src create a new folder called styles and create the global.scss file



----CLONING THE REPOSITORY
git clone https://github.com/platzi/curso-frontend-developer-practico 

----LOGIN
-Create a new folder in src called containers and inside create the Login.jsx component.
-In clase1.html copy the login section and paste it into the Login.jsx component 
-In global styles create the Login.scss file and paste the css copied from clase1.html 
    the :root and body styles will be take it to 'global.css'
----LAYOUT
-Create the Layout.jsx component inside containers folder
-In App return 
    <Layout>
        <Login />
    </Layout>
*Modify this section into webpack
    test:/\.(css|scss)$/,
-separate the element ': root' into a new file: vars.scss and use it into Login.css by  @use './vars'; 
*Modify in rules section inside webpack:
    {
        test: /\.(png|jpg|svg|jpeg|webp)$/,
        type: 'asset/resource',
        generator: {
            filename: 'assets/pictures/[hash][ext]',
        }
    }

-----PASSWORD RECOVERY
-Create a new component called RecoveryPassword in containers.
    In styles create RecoveryPassword.scss

----ROUTES
-npm install react-router-dom
-Move App.js to a new folder called routes
-Create a new Route thas has a new component named Home and other named NotFound
-This 2 new components will be into a new folder in src named pages
-Add this two components to App with its Routes
In webpack add the next line into the output object
    publicPath: '/'
    In devServer replace all content with
        historyApiFallback: true

----ORGANIZATION OF COMPONENTS, CONTAINERS AND PAGES
-In components create a new one called Header 
-In pages folder put the next elements:
    Checkout
    CreateAccount
    Home
    Login
    MyAccount
    NewPassword
    NotFound
    Orders
    PasswordRecovery
    SendEmail
    
-In containers folder put the next elements:
    Layout
    MyOrder
    ProductDetail
    ProductList

-In components folder put the next elements:
    Header
    Menu 
    Order 
    OrderItem
    ProductInfo
    ProductItem
    ShoppingCartItem

-In App.jsx add the new components, containers and pages
-In styles folder add all the missing styles
-In webpack at resolve add the next lines
    alias: {
        '@components': path.resolve(__dirname, 'src/components/'),
        '@containers': path.resolve(__dirname, 'src/containers/'),
        '@styles': path.resolve(__dirname, 'src/styles/'),
        '@icons': path.resolve(__dirname, 'src/assets/icons/'),
        '@logos': path.resolve(__dirname, 'src/assets/logos/'),
    }

-Now we can import syles in Header.jsx like this 
    import '@styles/Header.scss';
-Import the images this way
    import menu from '@icons/icon_menu.svg'
-In Header's style change the next className 
    logo for nav-logo


----HEADER - TOGGLE MENU useState
-Create a funcion that makes a toggle using useState
-In the onClick event use this funcion to show the menu

----PRODUCT-LIST
-npm install axios
-create a state using useState, and bring the products from the API by useEffect
-useEffect content a async funcion which by axios will get the products from the API
-return a map of products and for each product return <ProductItem/> component
-to solve console regeneratorRuntime error (generated by async-await):
    npm install @babel/plugin-transform-runtime

    in .babelrc add:
    "plugins":[
        "@babel/plugin-transform-runtime"
    ]

----PRODUCT-LIST Custom hook
create a new folder in src named hooks and inside create a file called useGetProducts.jsx
----PRODUCT ITEM 
-Pass products to ProductItem component


----LOGIN - useRef
-Create a const form by useRef
-add to form the property ref={form}
-Manage the handleSubmit using formData into a funcion called handleSubmit
    which will get:
		const data = {
			password: formData.get('password'),
			email: formData.get('email')
		}

----PRODUCT ITEM - React Context
-In src create a new folder called context 
-Inside this folder create the AppContext.js file
-Use this context in App.jsx, wrap the App with AppContext.Provider
-In hooks create a new one called useInitialState.jsx which should return state and addTocard
-use this hook in ProductItem getting the parameter addTocard by useContext from AppContext
-Create the handleClick funcion which containes addTocard
-Pass this function to onClick event by an anonoymous funcion to the button in charge to send the product.

